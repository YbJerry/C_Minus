Terminals unused in grammar

   ERROR


State 102 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration

    6 $@1: %empty

    7 var-declaration: type-specifier ID $@1 SEMICOLON

    8 $@2: %empty

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET SEMICOLON

   10 type-specifier: INT
   11               | VOID

   12 $@3: %empty

   13 fun-declaration: type-specifier ID $@3 LPAREN params RPAREN compound-stmt

   14 params: param-list
   15       | VOID

   16 param-list: param-list COMMA param
   17           | param

   18 param: type-specifier ID
   19      | type-specifier ID LBRACKET RBRACKET

   20 compound-stmt: LBRACE local-declarations statement-list RBRACE

   21 local-declarations: local-declarations var-declaration
   22                   | %empty

   23 statement-list: statement-list statement
   24               | %empty

   25 statement: expression-stmt
   26          | compound-stmt
   27          | selection-stmt
   28          | iteration-stmt
   29          | return-stmt

   30 expression-stmt: expression SEMICOLON
   31                | SEMICOLON

   32 selection-stmt: IF LPAREN expression RPAREN statement else-stmt

   33 else-stmt: ELSE statement
   34          | %empty

   35 iteration-stmt: WHILE LPAREN expression RPAREN statement

   36 return-stmt: RETURN SEMICOLON
   37            | RETURN expression SEMICOLON

   38 expression: var ASSIGN expression
   39           | simple-expression

   40 var: ID

   41 $@4: %empty

   42 var: ID $@4 LBRACKET expression RBRACKET

   43 simple-expression: additive-expression relop additive-expression
   44                  | additive-expression

   45 relop: LEQ
   46      | LT
   47      | GT
   48      | GEQ
   49      | EQ
   50      | NEQ

   51 additive-expression: additive-expression addop term
   52                    | term

   53 addop: PLUS
   54      | MINUS

   55 term: term mulop factor
   56     | factor

   57 mulop: TIMES
   58      | DIVIDE

   59 factor: LPAREN expression RPAREN
   60       | var
   61       | call
   62       | NUM

   63 $@5: %empty

   64 call: ID $@5 LPAREN args RPAREN

   65 args: arg-list
   66     | %empty

   67 arg-list: arg-list COMMA expression
   68         | expression


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 9 13 18 19 40 42 64
NUM (259) 9 62
IF (260) 32
ELSE (261) 33
INT (262) 10
RETURN (263) 36 37
VOID (264) 11 15
WHILE (265) 35
PLUS (266) 53
MINUS (267) 54
TIMES (268) 57
DIVIDE (269) 58
LT (270) 46
LEQ (271) 45
GT (272) 47
GEQ (273) 48
EQ (274) 49
NEQ (275) 50
ASSIGN (276) 38
SEMICOLON (277) 7 9 30 31 36 37
COMMA (278) 16 67
LPAREN (279) 13 32 35 59 64
RPAREN (280) 13 32 35 59 64
LBRACKET (281) 9 19 42
RBRACKET (282) 9 19 42
LBRACE (283) 20
RBRACE (284) 20
ERROR (285)


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
declaration-list (33)
    on left: 2 3, on right: 1 2
declaration (34)
    on left: 4 5, on right: 2 3
var-declaration (35)
    on left: 7 9, on right: 4 21
$@1 (36)
    on left: 6, on right: 7
$@2 (37)
    on left: 8, on right: 9
type-specifier (38)
    on left: 10 11, on right: 7 9 13 18 19
fun-declaration (39)
    on left: 13, on right: 5
$@3 (40)
    on left: 12, on right: 13
params (41)
    on left: 14 15, on right: 13
param-list (42)
    on left: 16 17, on right: 14 16
param (43)
    on left: 18 19, on right: 16 17
compound-stmt (44)
    on left: 20, on right: 13 26
local-declarations (45)
    on left: 21 22, on right: 20 21
statement-list (46)
    on left: 23 24, on right: 20 23
statement (47)
    on left: 25 26 27 28 29, on right: 23 32 33 35
expression-stmt (48)
    on left: 30 31, on right: 25
selection-stmt (49)
    on left: 32, on right: 27
else-stmt (50)
    on left: 33 34, on right: 32
iteration-stmt (51)
    on left: 35, on right: 28
return-stmt (52)
    on left: 36 37, on right: 29
expression (53)
    on left: 38 39, on right: 30 32 35 37 38 42 59 67 68
var (54)
    on left: 40 42, on right: 38 60
$@4 (55)
    on left: 41, on right: 42
simple-expression (56)
    on left: 43 44, on right: 39
relop (57)
    on left: 45 46 47 48 49 50, on right: 43
additive-expression (58)
    on left: 51 52, on right: 43 44 51
addop (59)
    on left: 53 54, on right: 51
term (60)
    on left: 55 56, on right: 51 52 55
mulop (61)
    on left: 57 58, on right: 55
factor (62)
    on left: 59 60 61 62, on right: 55 56
call (63)
    on left: 64, on right: 61
$@5 (64)
    on left: 63, on right: 64
args (65)
    on left: 65 66, on right: 64
arg-list (66)
    on left: 67 68, on right: 65 67


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

   10 type-specifier: INT .

    $default  reduce using rule 10 (type-specifier)


State 2

   11 type-specifier: VOID .

    $default  reduce using rule 11 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 7

    7 var-declaration: type-specifier . ID $@1 SEMICOLON
    9                | type-specifier . ID $@2 LBRACKET NUM RBRACKET SEMICOLON
   13 fun-declaration: type-specifier . ID $@3 LPAREN params RPAREN compound-stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end .

    $default  accept


State 10

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 11

    7 var-declaration: type-specifier ID . $@1 SEMICOLON
    9                | type-specifier ID . $@2 LBRACKET NUM RBRACKET SEMICOLON
   13 fun-declaration: type-specifier ID . $@3 LPAREN params RPAREN compound-stmt

    LPAREN    reduce using rule 12 ($@3)
    LBRACKET  reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    $@1  go to state 12
    $@2  go to state 13
    $@3  go to state 14


State 12

    7 var-declaration: type-specifier ID $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 15


State 13

    9 var-declaration: type-specifier ID $@2 . LBRACKET NUM RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 16


State 14

   13 fun-declaration: type-specifier ID $@3 . LPAREN params RPAREN compound-stmt

    LPAREN  shift, and go to state 17


State 15

    7 var-declaration: type-specifier ID $@1 SEMICOLON .

    $default  reduce using rule 7 (var-declaration)


State 16

    9 var-declaration: type-specifier ID $@2 LBRACKET . NUM RBRACKET SEMICOLON

    NUM  shift, and go to state 18


State 17

   13 fun-declaration: type-specifier ID $@3 LPAREN . params RPAREN compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 19

    type-specifier  go to state 20
    params          go to state 21
    param-list      go to state 22
    param           go to state 23


State 18

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 24


State 19

   11 type-specifier: VOID .
   15 params: VOID .

    RPAREN    reduce using rule 15 (params)
    $default  reduce using rule 11 (type-specifier)


State 20

   18 param: type-specifier . ID
   19      | type-specifier . ID LBRACKET RBRACKET

    ID  shift, and go to state 25


State 21

   13 fun-declaration: type-specifier ID $@3 LPAREN params . RPAREN compound-stmt

    RPAREN  shift, and go to state 26


State 22

   14 params: param-list .
   16 param-list: param-list . COMMA param

    COMMA  shift, and go to state 27

    $default  reduce using rule 14 (params)


State 23

   17 param-list: param .

    $default  reduce using rule 17 (param-list)


State 24

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 28


State 25

   18 param: type-specifier ID .
   19      | type-specifier ID . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 29

    $default  reduce using rule 18 (param)


State 26

   13 fun-declaration: type-specifier ID $@3 LPAREN params RPAREN . compound-stmt

    LBRACE  shift, and go to state 30

    compound-stmt  go to state 31


State 27

   16 param-list: param-list COMMA . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 20
    param           go to state 32


State 28

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET SEMICOLON .

    $default  reduce using rule 9 (var-declaration)


State 29

   19 param: type-specifier ID LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 33


State 30

   20 compound-stmt: LBRACE . local-declarations statement-list RBRACE

    $default  reduce using rule 22 (local-declarations)

    local-declarations  go to state 34


State 31

   13 fun-declaration: type-specifier ID $@3 LPAREN params RPAREN compound-stmt .

    $default  reduce using rule 13 (fun-declaration)


State 32

   16 param-list: param-list COMMA param .

    $default  reduce using rule 16 (param-list)


State 33

   19 param: type-specifier ID LBRACKET RBRACKET .

    $default  reduce using rule 19 (param)


State 34

   20 compound-stmt: LBRACE local-declarations . statement-list RBRACE
   21 local-declarations: local-declarations . var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 24 (statement-list)

    var-declaration  go to state 35
    type-specifier   go to state 36
    statement-list   go to state 37


State 35

   21 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 21 (local-declarations)


State 36

    7 var-declaration: type-specifier . ID $@1 SEMICOLON
    9                | type-specifier . ID $@2 LBRACKET NUM RBRACKET SEMICOLON

    ID  shift, and go to state 38


State 37

   20 compound-stmt: LBRACE local-declarations statement-list . RBRACE
   23 statement-list: statement-list . statement

    ID         shift, and go to state 39
    NUM        shift, and go to state 40
    IF         shift, and go to state 41
    RETURN     shift, and go to state 42
    WHILE      shift, and go to state 43
    SEMICOLON  shift, and go to state 44
    LPAREN     shift, and go to state 45
    LBRACE     shift, and go to state 30
    RBRACE     shift, and go to state 46

    compound-stmt        go to state 47
    statement            go to state 48
    expression-stmt      go to state 49
    selection-stmt       go to state 50
    iteration-stmt       go to state 51
    return-stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 38

    7 var-declaration: type-specifier ID . $@1 SEMICOLON
    9                | type-specifier ID . $@2 LBRACKET NUM RBRACKET SEMICOLON

    LBRACKET  reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    $@1  go to state 12
    $@2  go to state 13


State 39

   40 var: ID .
   42    | ID . $@4 LBRACKET expression RBRACKET
   64 call: ID . $@5 LPAREN args RPAREN

    LPAREN    reduce using rule 63 ($@5)
    LBRACKET  reduce using rule 41 ($@4)
    $default  reduce using rule 40 (var)

    $@4  go to state 60
    $@5  go to state 61


State 40

   62 factor: NUM .

    $default  reduce using rule 62 (factor)


State 41

   32 selection-stmt: IF . LPAREN expression RPAREN statement else-stmt

    LPAREN  shift, and go to state 62


State 42

   36 return-stmt: RETURN . SEMICOLON
   37            | RETURN . expression SEMICOLON

    ID         shift, and go to state 39
    NUM        shift, and go to state 40
    SEMICOLON  shift, and go to state 63
    LPAREN     shift, and go to state 45

    expression           go to state 64
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 43

   35 iteration-stmt: WHILE . LPAREN expression RPAREN statement

    LPAREN  shift, and go to state 65


State 44

   31 expression-stmt: SEMICOLON .

    $default  reduce using rule 31 (expression-stmt)


State 45

   59 factor: LPAREN . expression RPAREN

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    expression           go to state 66
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 46

   20 compound-stmt: LBRACE local-declarations statement-list RBRACE .

    $default  reduce using rule 20 (compound-stmt)


State 47

   26 statement: compound-stmt .

    $default  reduce using rule 26 (statement)


State 48

   23 statement-list: statement-list statement .

    $default  reduce using rule 23 (statement-list)


State 49

   25 statement: expression-stmt .

    $default  reduce using rule 25 (statement)


State 50

   27 statement: selection-stmt .

    $default  reduce using rule 27 (statement)


State 51

   28 statement: iteration-stmt .

    $default  reduce using rule 28 (statement)


State 52

   29 statement: return-stmt .

    $default  reduce using rule 29 (statement)


State 53

   30 expression-stmt: expression . SEMICOLON

    SEMICOLON  shift, and go to state 67


State 54

   38 expression: var . ASSIGN expression
   60 factor: var .

    ASSIGN  shift, and go to state 68

    $default  reduce using rule 60 (factor)


State 55

   39 expression: simple-expression .

    $default  reduce using rule 39 (expression)


State 56

   43 simple-expression: additive-expression . relop additive-expression
   44                  | additive-expression .
   51 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70
    LT     shift, and go to state 71
    LEQ    shift, and go to state 72
    GT     shift, and go to state 73
    GEQ    shift, and go to state 74
    EQ     shift, and go to state 75
    NEQ    shift, and go to state 76

    $default  reduce using rule 44 (simple-expression)

    relop  go to state 77
    addop  go to state 78


State 57

   52 additive-expression: term .
   55 term: term . mulop factor

    TIMES   shift, and go to state 79
    DIVIDE  shift, and go to state 80

    $default  reduce using rule 52 (additive-expression)

    mulop  go to state 81


State 58

   56 term: factor .

    $default  reduce using rule 56 (term)


State 59

   61 factor: call .

    $default  reduce using rule 61 (factor)


State 60

   42 var: ID $@4 . LBRACKET expression RBRACKET

    LBRACKET  shift, and go to state 82


State 61

   64 call: ID $@5 . LPAREN args RPAREN

    LPAREN  shift, and go to state 83


State 62

   32 selection-stmt: IF LPAREN . expression RPAREN statement else-stmt

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    expression           go to state 84
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 63

   36 return-stmt: RETURN SEMICOLON .

    $default  reduce using rule 36 (return-stmt)


State 64

   37 return-stmt: RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 85


State 65

   35 iteration-stmt: WHILE LPAREN . expression RPAREN statement

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    expression           go to state 86
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 66

   59 factor: LPAREN expression . RPAREN

    RPAREN  shift, and go to state 87


State 67

   30 expression-stmt: expression SEMICOLON .

    $default  reduce using rule 30 (expression-stmt)


State 68

   38 expression: var ASSIGN . expression

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    expression           go to state 88
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 69

   53 addop: PLUS .

    $default  reduce using rule 53 (addop)


State 70

   54 addop: MINUS .

    $default  reduce using rule 54 (addop)


State 71

   46 relop: LT .

    $default  reduce using rule 46 (relop)


State 72

   45 relop: LEQ .

    $default  reduce using rule 45 (relop)


State 73

   47 relop: GT .

    $default  reduce using rule 47 (relop)


State 74

   48 relop: GEQ .

    $default  reduce using rule 48 (relop)


State 75

   49 relop: EQ .

    $default  reduce using rule 49 (relop)


State 76

   50 relop: NEQ .

    $default  reduce using rule 50 (relop)


State 77

   43 simple-expression: additive-expression relop . additive-expression

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    var                  go to state 89
    additive-expression  go to state 90
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 78

   51 additive-expression: additive-expression addop . term

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    var     go to state 89
    term    go to state 91
    factor  go to state 58
    call    go to state 59


State 79

   57 mulop: TIMES .

    $default  reduce using rule 57 (mulop)


State 80

   58 mulop: DIVIDE .

    $default  reduce using rule 58 (mulop)


State 81

   55 term: term mulop . factor

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    var     go to state 89
    factor  go to state 92
    call    go to state 59


State 82

   42 var: ID $@4 LBRACKET . expression RBRACKET

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    expression           go to state 93
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 83

   64 call: ID $@5 LPAREN . args RPAREN

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    $default  reduce using rule 66 (args)

    expression           go to state 94
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    args                 go to state 95
    arg-list             go to state 96


State 84

   32 selection-stmt: IF LPAREN expression . RPAREN statement else-stmt

    RPAREN  shift, and go to state 97


State 85

   37 return-stmt: RETURN expression SEMICOLON .

    $default  reduce using rule 37 (return-stmt)


State 86

   35 iteration-stmt: WHILE LPAREN expression . RPAREN statement

    RPAREN  shift, and go to state 98


State 87

   59 factor: LPAREN expression RPAREN .

    $default  reduce using rule 59 (factor)


State 88

   38 expression: var ASSIGN expression .

    $default  reduce using rule 38 (expression)


State 89

   60 factor: var .

    $default  reduce using rule 60 (factor)


State 90

   43 simple-expression: additive-expression relop additive-expression .
   51 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 69
    MINUS  shift, and go to state 70

    $default  reduce using rule 43 (simple-expression)

    addop  go to state 78


State 91

   51 additive-expression: additive-expression addop term .
   55 term: term . mulop factor

    TIMES   shift, and go to state 79
    DIVIDE  shift, and go to state 80

    $default  reduce using rule 51 (additive-expression)

    mulop  go to state 81


State 92

   55 term: term mulop factor .

    $default  reduce using rule 55 (term)


State 93

   42 var: ID $@4 LBRACKET expression . RBRACKET

    RBRACKET  shift, and go to state 99


State 94

   68 arg-list: expression .

    $default  reduce using rule 68 (arg-list)


State 95

   64 call: ID $@5 LPAREN args . RPAREN

    RPAREN  shift, and go to state 100


State 96

   65 args: arg-list .
   67 arg-list: arg-list . COMMA expression

    COMMA  shift, and go to state 101

    $default  reduce using rule 65 (args)


State 97

   32 selection-stmt: IF LPAREN expression RPAREN . statement else-stmt

    ID         shift, and go to state 39
    NUM        shift, and go to state 40
    IF         shift, and go to state 41
    RETURN     shift, and go to state 42
    WHILE      shift, and go to state 43
    SEMICOLON  shift, and go to state 44
    LPAREN     shift, and go to state 45
    LBRACE     shift, and go to state 30

    compound-stmt        go to state 47
    statement            go to state 102
    expression-stmt      go to state 49
    selection-stmt       go to state 50
    iteration-stmt       go to state 51
    return-stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 98

   35 iteration-stmt: WHILE LPAREN expression RPAREN . statement

    ID         shift, and go to state 39
    NUM        shift, and go to state 40
    IF         shift, and go to state 41
    RETURN     shift, and go to state 42
    WHILE      shift, and go to state 43
    SEMICOLON  shift, and go to state 44
    LPAREN     shift, and go to state 45
    LBRACE     shift, and go to state 30

    compound-stmt        go to state 47
    statement            go to state 103
    expression-stmt      go to state 49
    selection-stmt       go to state 50
    iteration-stmt       go to state 51
    return-stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 99

   42 var: ID $@4 LBRACKET expression RBRACKET .

    $default  reduce using rule 42 (var)


State 100

   64 call: ID $@5 LPAREN args RPAREN .

    $default  reduce using rule 64 (call)


State 101

   67 arg-list: arg-list COMMA . expression

    ID      shift, and go to state 39
    NUM     shift, and go to state 40
    LPAREN  shift, and go to state 45

    expression           go to state 104
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 102

   32 selection-stmt: IF LPAREN expression RPAREN statement . else-stmt

    ELSE  shift, and go to state 105

    ELSE      [reduce using rule 34 (else-stmt)]
    $default  reduce using rule 34 (else-stmt)

    else-stmt  go to state 106


State 103

   35 iteration-stmt: WHILE LPAREN expression RPAREN statement .

    $default  reduce using rule 35 (iteration-stmt)


State 104

   67 arg-list: arg-list COMMA expression .

    $default  reduce using rule 67 (arg-list)


State 105

   33 else-stmt: ELSE . statement

    ID         shift, and go to state 39
    NUM        shift, and go to state 40
    IF         shift, and go to state 41
    RETURN     shift, and go to state 42
    WHILE      shift, and go to state 43
    SEMICOLON  shift, and go to state 44
    LPAREN     shift, and go to state 45
    LBRACE     shift, and go to state 30

    compound-stmt        go to state 47
    statement            go to state 107
    expression-stmt      go to state 49
    selection-stmt       go to state 50
    iteration-stmt       go to state 51
    return-stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple-expression    go to state 55
    additive-expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


State 106

   32 selection-stmt: IF LPAREN expression RPAREN statement else-stmt .

    $default  reduce using rule 32 (selection-stmt)


State 107

   33 else-stmt: ELSE statement .

    $default  reduce using rule 33 (else-stmt)

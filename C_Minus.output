Nonterminals useless in grammar

   empty
   arg-list
   args
   call


Terminals unused in grammar

   IF
   ELSE
   RETURN
   WHILE
   ERROR


Rules useless in grammar

   52 empty: %empty


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration

    6 $@1: %empty

    7 var-declaration: type-specifier ID $@1 SEMICOLON

    8 $@2: %empty

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET SEMICOLON

   10 type-specifier: INT
   11               | VOID

   12 $@3: %empty

   13 fun-declaration: type-specifier ID $@3 LPAREN params RPAREN compound-stmt

   14 params: param-list
   15       | VOID

   16 param-list: param-list COMMA param
   17           | param

   18 param: type-specifier ID

   19 $@4: %empty

   20 param: type-specifier ID $@4 LBRACKET RBRACKET

   21 compound-stmt: LBRACE local-declarations statement-list RBRACE

   22 local-declarations: local-declarations var-declaration
   23                   | %empty

   24 statement-list: statement-list statement
   25               | %empty

   26 statement: expression-stmt
   27          | compound-stmt

   28 expression-stmt: expression SEMICOLON
   29                | SEMICOLON

   30 expression: var ASSIGN expression
   31           | simple-expression

   32 var: ID
   33    | ID LBRACKET expression RBRACKET

   34 simple-expression: additive-expression relop additive-expression
   35                  | additive-expression

   36 relop: LEQ
   37      | LT
   38      | GT
   39      | GEQ
   40      | EQ
   41      | NEQ

   42 additive-expression: additive-expression addop term
   43                    | term

   44 addop: PLUS
   45      | MINUS

   46 term: term mulop factor
   47     | factor

   48 mulop: TIMES
   49      | DIVIDE

   50 factor: LPAREN expression RPAREN
   51       | NUM


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 7 9 13 18 20 32 33
NUM (259) 9 51
IF (260)
ELSE (261)
INT (262) 10
RETURN (263)
VOID (264) 11 15
WHILE (265)
PLUS (266) 44
MINUS (267) 45
TIMES (268) 48
DIVIDE (269) 49
LT (270) 37
LEQ (271) 36
GT (272) 38
GEQ (273) 39
EQ (274) 40
NEQ (275) 41
ASSIGN (276) 30
SEMICOLON (277) 7 9 28 29
COMMA (278) 16
LPAREN (279) 13 50
RPAREN (280) 13 50
LBRACKET (281) 9 20 33
RBRACKET (282) 9 20 33
LBRACE (283) 21
RBRACE (284) 21
ERROR (285)


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
declaration-list (33)
    on left: 2 3, on right: 1 2
declaration (34)
    on left: 4 5, on right: 2 3
var-declaration (35)
    on left: 7 9, on right: 4 22
$@1 (36)
    on left: 6, on right: 7
$@2 (37)
    on left: 8, on right: 9
type-specifier (38)
    on left: 10 11, on right: 7 9 13 18 20
fun-declaration (39)
    on left: 13, on right: 5
$@3 (40)
    on left: 12, on right: 13
params (41)
    on left: 14 15, on right: 13
param-list (42)
    on left: 16 17, on right: 14 16
param (43)
    on left: 18 20, on right: 16 17
$@4 (44)
    on left: 19, on right: 20
compound-stmt (45)
    on left: 21, on right: 13 27
local-declarations (46)
    on left: 22 23, on right: 21 22
statement-list (47)
    on left: 24 25, on right: 21 24
statement (48)
    on left: 26 27, on right: 24
expression-stmt (49)
    on left: 28 29, on right: 26
expression (50)
    on left: 30 31, on right: 28 30 33 50
var (51)
    on left: 32 33, on right: 30
simple-expression (52)
    on left: 34 35, on right: 31
relop (53)
    on left: 36 37 38 39 40 41, on right: 34
additive-expression (54)
    on left: 42 43, on right: 34 35 42
addop (55)
    on left: 44 45, on right: 42
term (56)
    on left: 46 47, on right: 42 43 46
mulop (57)
    on left: 48 49, on right: 46
factor (58)
    on left: 50 51, on right: 46 47


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

   10 type-specifier: INT .

    $default  reduce using rule 10 (type-specifier)


State 2

   11 type-specifier: VOID .

    $default  reduce using rule 11 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 7

    7 var-declaration: type-specifier . ID $@1 SEMICOLON
    9                | type-specifier . ID $@2 LBRACKET NUM RBRACKET SEMICOLON
   13 fun-declaration: type-specifier . ID $@3 LPAREN params RPAREN compound-stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end .

    $default  accept


State 10

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 11

    7 var-declaration: type-specifier ID . $@1 SEMICOLON
    9                | type-specifier ID . $@2 LBRACKET NUM RBRACKET SEMICOLON
   13 fun-declaration: type-specifier ID . $@3 LPAREN params RPAREN compound-stmt

    LPAREN    reduce using rule 12 ($@3)
    LBRACKET  reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    $@1  go to state 12
    $@2  go to state 13
    $@3  go to state 14


State 12

    7 var-declaration: type-specifier ID $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 15


State 13

    9 var-declaration: type-specifier ID $@2 . LBRACKET NUM RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 16


State 14

   13 fun-declaration: type-specifier ID $@3 . LPAREN params RPAREN compound-stmt

    LPAREN  shift, and go to state 17


State 15

    7 var-declaration: type-specifier ID $@1 SEMICOLON .

    $default  reduce using rule 7 (var-declaration)


State 16

    9 var-declaration: type-specifier ID $@2 LBRACKET . NUM RBRACKET SEMICOLON

    NUM  shift, and go to state 18


State 17

   13 fun-declaration: type-specifier ID $@3 LPAREN . params RPAREN compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 19

    type-specifier  go to state 20
    params          go to state 21
    param-list      go to state 22
    param           go to state 23


State 18

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 24


State 19

   11 type-specifier: VOID .
   15 params: VOID .

    RPAREN    reduce using rule 15 (params)
    $default  reduce using rule 11 (type-specifier)


State 20

   18 param: type-specifier . ID
   20      | type-specifier . ID $@4 LBRACKET RBRACKET

    ID  shift, and go to state 25


State 21

   13 fun-declaration: type-specifier ID $@3 LPAREN params . RPAREN compound-stmt

    RPAREN  shift, and go to state 26


State 22

   14 params: param-list .
   16 param-list: param-list . COMMA param

    COMMA  shift, and go to state 27

    $default  reduce using rule 14 (params)


State 23

   17 param-list: param .

    $default  reduce using rule 17 (param-list)


State 24

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 28


State 25

   18 param: type-specifier ID .
   20      | type-specifier ID . $@4 LBRACKET RBRACKET

    LBRACKET  reduce using rule 19 ($@4)
    $default  reduce using rule 18 (param)

    $@4  go to state 29


State 26

   13 fun-declaration: type-specifier ID $@3 LPAREN params RPAREN . compound-stmt

    LBRACE  shift, and go to state 30

    compound-stmt  go to state 31


State 27

   16 param-list: param-list COMMA . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 20
    param           go to state 32


State 28

    9 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET SEMICOLON .

    $default  reduce using rule 9 (var-declaration)


State 29

   20 param: type-specifier ID $@4 . LBRACKET RBRACKET

    LBRACKET  shift, and go to state 33


State 30

   21 compound-stmt: LBRACE . local-declarations statement-list RBRACE

    $default  reduce using rule 23 (local-declarations)

    local-declarations  go to state 34


State 31

   13 fun-declaration: type-specifier ID $@3 LPAREN params RPAREN compound-stmt .

    $default  reduce using rule 13 (fun-declaration)


State 32

   16 param-list: param-list COMMA param .

    $default  reduce using rule 16 (param-list)


State 33

   20 param: type-specifier ID $@4 LBRACKET . RBRACKET

    RBRACKET  shift, and go to state 35


State 34

   21 compound-stmt: LBRACE local-declarations . statement-list RBRACE
   22 local-declarations: local-declarations . var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 25 (statement-list)

    var-declaration  go to state 36
    type-specifier   go to state 37
    statement-list   go to state 38


State 35

   20 param: type-specifier ID $@4 LBRACKET RBRACKET .

    $default  reduce using rule 20 (param)


State 36

   22 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 22 (local-declarations)


State 37

    7 var-declaration: type-specifier . ID $@1 SEMICOLON
    9                | type-specifier . ID $@2 LBRACKET NUM RBRACKET SEMICOLON

    ID  shift, and go to state 39


State 38

   21 compound-stmt: LBRACE local-declarations statement-list . RBRACE
   24 statement-list: statement-list . statement

    ID         shift, and go to state 40
    NUM        shift, and go to state 41
    SEMICOLON  shift, and go to state 42
    LPAREN     shift, and go to state 43
    LBRACE     shift, and go to state 30
    RBRACE     shift, and go to state 44

    compound-stmt        go to state 45
    statement            go to state 46
    expression-stmt      go to state 47
    expression           go to state 48
    var                  go to state 49
    simple-expression    go to state 50
    additive-expression  go to state 51
    term                 go to state 52
    factor               go to state 53


State 39

    7 var-declaration: type-specifier ID . $@1 SEMICOLON
    9                | type-specifier ID . $@2 LBRACKET NUM RBRACKET SEMICOLON

    LBRACKET  reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    $@1  go to state 12
    $@2  go to state 13


State 40

   32 var: ID .
   33    | ID . LBRACKET expression RBRACKET

    LBRACKET  shift, and go to state 54

    $default  reduce using rule 32 (var)


State 41

   51 factor: NUM .

    $default  reduce using rule 51 (factor)


State 42

   29 expression-stmt: SEMICOLON .

    $default  reduce using rule 29 (expression-stmt)


State 43

   50 factor: LPAREN . expression RPAREN

    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 43

    expression           go to state 55
    var                  go to state 49
    simple-expression    go to state 50
    additive-expression  go to state 51
    term                 go to state 52
    factor               go to state 53


State 44

   21 compound-stmt: LBRACE local-declarations statement-list RBRACE .

    $default  reduce using rule 21 (compound-stmt)


State 45

   27 statement: compound-stmt .

    $default  reduce using rule 27 (statement)


State 46

   24 statement-list: statement-list statement .

    $default  reduce using rule 24 (statement-list)


State 47

   26 statement: expression-stmt .

    $default  reduce using rule 26 (statement)


State 48

   28 expression-stmt: expression . SEMICOLON

    SEMICOLON  shift, and go to state 56


State 49

   30 expression: var . ASSIGN expression

    ASSIGN  shift, and go to state 57


State 50

   31 expression: simple-expression .

    $default  reduce using rule 31 (expression)


State 51

   34 simple-expression: additive-expression . relop additive-expression
   35                  | additive-expression .
   42 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59
    LT     shift, and go to state 60
    LEQ    shift, and go to state 61
    GT     shift, and go to state 62
    GEQ    shift, and go to state 63
    EQ     shift, and go to state 64
    NEQ    shift, and go to state 65

    $default  reduce using rule 35 (simple-expression)

    relop  go to state 66
    addop  go to state 67


State 52

   43 additive-expression: term .
   46 term: term . mulop factor

    TIMES   shift, and go to state 68
    DIVIDE  shift, and go to state 69

    $default  reduce using rule 43 (additive-expression)

    mulop  go to state 70


State 53

   47 term: factor .

    $default  reduce using rule 47 (term)


State 54

   33 var: ID LBRACKET . expression RBRACKET

    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 43

    expression           go to state 71
    var                  go to state 49
    simple-expression    go to state 50
    additive-expression  go to state 51
    term                 go to state 52
    factor               go to state 53


State 55

   50 factor: LPAREN expression . RPAREN

    RPAREN  shift, and go to state 72


State 56

   28 expression-stmt: expression SEMICOLON .

    $default  reduce using rule 28 (expression-stmt)


State 57

   30 expression: var ASSIGN . expression

    ID      shift, and go to state 40
    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 43

    expression           go to state 73
    var                  go to state 49
    simple-expression    go to state 50
    additive-expression  go to state 51
    term                 go to state 52
    factor               go to state 53


State 58

   44 addop: PLUS .

    $default  reduce using rule 44 (addop)


State 59

   45 addop: MINUS .

    $default  reduce using rule 45 (addop)


State 60

   37 relop: LT .

    $default  reduce using rule 37 (relop)


State 61

   36 relop: LEQ .

    $default  reduce using rule 36 (relop)


State 62

   38 relop: GT .

    $default  reduce using rule 38 (relop)


State 63

   39 relop: GEQ .

    $default  reduce using rule 39 (relop)


State 64

   40 relop: EQ .

    $default  reduce using rule 40 (relop)


State 65

   41 relop: NEQ .

    $default  reduce using rule 41 (relop)


State 66

   34 simple-expression: additive-expression relop . additive-expression

    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 43

    additive-expression  go to state 74
    term                 go to state 52
    factor               go to state 53


State 67

   42 additive-expression: additive-expression addop . term

    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 43

    term    go to state 75
    factor  go to state 53


State 68

   48 mulop: TIMES .

    $default  reduce using rule 48 (mulop)


State 69

   49 mulop: DIVIDE .

    $default  reduce using rule 49 (mulop)


State 70

   46 term: term mulop . factor

    NUM     shift, and go to state 41
    LPAREN  shift, and go to state 43

    factor  go to state 76


State 71

   33 var: ID LBRACKET expression . RBRACKET

    RBRACKET  shift, and go to state 77


State 72

   50 factor: LPAREN expression RPAREN .

    $default  reduce using rule 50 (factor)


State 73

   30 expression: var ASSIGN expression .

    $default  reduce using rule 30 (expression)


State 74

   34 simple-expression: additive-expression relop additive-expression .
   42 additive-expression: additive-expression . addop term

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    $default  reduce using rule 34 (simple-expression)

    addop  go to state 67


State 75

   42 additive-expression: additive-expression addop term .
   46 term: term . mulop factor

    TIMES   shift, and go to state 68
    DIVIDE  shift, and go to state 69

    $default  reduce using rule 42 (additive-expression)

    mulop  go to state 70


State 76

   46 term: term mulop factor .

    $default  reduce using rule 46 (term)


State 77

   33 var: ID LBRACKET expression RBRACKET .

    $default  reduce using rule 33 (var)

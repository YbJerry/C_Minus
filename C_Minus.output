Terminals unused in grammar

   IF
   ELSE
   RETURN
   WHILE
   PLUS
   MINUS
   TIMES
   DIVIDE
   LT
   LEQ
   GT
   GEQ
   EQ
   NEQ
   ASSIGN
   COMMA
   LPAREN
   RPAREN
   LBRACE
   RBRACE
   ERROR


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration

    5 $@1: %empty

    6 var-declaration: type-specifier ID $@1 SEMICOLON

    7 $@2: %empty

    8 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET SEMICOLON

    9 type-specifier: INT
   10               | VOID


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 6 8
NUM (259) 8
IF (260)
ELSE (261)
INT (262) 9
RETURN (263)
VOID (264) 10
WHILE (265)
PLUS (266)
MINUS (267)
TIMES (268)
DIVIDE (269)
LT (270)
LEQ (271)
GT (272)
GEQ (273)
EQ (274)
NEQ (275)
ASSIGN (276)
SEMICOLON (277) 6 8
COMMA (278)
LPAREN (279)
RPAREN (280)
LBRACKET (281) 8
RBRACKET (282) 8
LBRACE (283)
RBRACE (284)
ERROR (285)


Nonterminals, with rules where they appear

$accept (31)
    on left: 0
program (32)
    on left: 1, on right: 0
declaration-list (33)
    on left: 2 3, on right: 1 2
declaration (34)
    on left: 4, on right: 2 3
var-declaration (35)
    on left: 6 8, on right: 4
$@1 (36)
    on left: 5, on right: 6
$@2 (37)
    on left: 7, on right: 8
type-specifier (38)
    on left: 9 10, on right: 6 8


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7


State 1

    9 type-specifier: INT .

    $default  reduce using rule 9 (type-specifier)


State 2

   10 type-specifier: VOID .

    $default  reduce using rule 10 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 8


State 4

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 9
    var-declaration  go to state 6
    type-specifier   go to state 7


State 5

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 7

    6 var-declaration: type-specifier . ID $@1 SEMICOLON
    8                | type-specifier . ID $@2 LBRACKET NUM RBRACKET SEMICOLON

    ID  shift, and go to state 10


State 8

    0 $accept: program $end .

    $default  accept


State 9

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 10

    6 var-declaration: type-specifier ID . $@1 SEMICOLON
    8                | type-specifier ID . $@2 LBRACKET NUM RBRACKET SEMICOLON

    LBRACKET  reduce using rule 7 ($@2)
    $default  reduce using rule 5 ($@1)

    $@1  go to state 11
    $@2  go to state 12


State 11

    6 var-declaration: type-specifier ID $@1 . SEMICOLON

    SEMICOLON  shift, and go to state 13


State 12

    8 var-declaration: type-specifier ID $@2 . LBRACKET NUM RBRACKET SEMICOLON

    LBRACKET  shift, and go to state 14


State 13

    6 var-declaration: type-specifier ID $@1 SEMICOLON .

    $default  reduce using rule 6 (var-declaration)


State 14

    8 var-declaration: type-specifier ID $@2 LBRACKET . NUM RBRACKET SEMICOLON

    NUM  shift, and go to state 15


State 15

    8 var-declaration: type-specifier ID $@2 LBRACKET NUM . RBRACKET SEMICOLON

    RBRACKET  shift, and go to state 16


State 16

    8 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET . SEMICOLON

    SEMICOLON  shift, and go to state 17


State 17

    8 var-declaration: type-specifier ID $@2 LBRACKET NUM RBRACKET SEMICOLON .

    $default  reduce using rule 8 (var-declaration)
